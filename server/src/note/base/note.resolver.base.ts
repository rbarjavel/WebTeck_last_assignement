/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreateNoteArgs } from "./CreateNoteArgs";
import { UpdateNoteArgs } from "./UpdateNoteArgs";
import { DeleteNoteArgs } from "./DeleteNoteArgs";
import { NoteFindManyArgs } from "./NoteFindManyArgs";
import { NoteFindUniqueArgs } from "./NoteFindUniqueArgs";
import { Note } from "./Note";
import { Group } from "../../group/base/Group";
import { NoteService } from "../note.service";

@graphql.Resolver(() => Note)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class NoteResolverBase {
  constructor(
    protected readonly service: NoteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _notesMeta(
    @graphql.Args() args: NoteFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [Note])
  async notes(@graphql.Args() args: NoteFindManyArgs): Promise<Note[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => Note, { nullable: true })
  async note(@graphql.Args() args: NoteFindUniqueArgs): Promise<Note | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.Mutation(() => Note)
  async createNote(@graphql.Args() args: CreateNoteArgs): Promise<Note> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        group: args.data.group
          ? {
              connect: args.data.group,
            }
          : undefined,
      },
    });
  }

  @Public()
  @graphql.Mutation(() => Note)
  async updateNote(@graphql.Args() args: UpdateNoteArgs): Promise<Note | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          group: args.data.group
            ? {
                connect: args.data.group,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.Mutation(() => Note)
  async deleteNote(@graphql.Args() args: DeleteNoteArgs): Promise<Note | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => Group, { nullable: true })
  async group(@graphql.Parent() parent: Note): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
